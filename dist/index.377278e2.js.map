{"mappings":"AAAA,kBAAkB;AAClB,yEAAyE;AACzE,yEAAyE;AACzE,yEAAyE;AACzE,KAAK;AAEL,6CAA6C;AAO7C,MAAM,SAAiB,CAAC,OAAY,YAAc;IAChD,2DAA2D;IAE3D,IAAI,SAAS,EAAE;IAEf,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,IAAI,OAAO,KAAK,CAAC,EAAE;QAEnB,qCAAqC;QACrC,IAAI,UAAU,OACZ,OAAO,IAAI,CAAC;IAEhB;IACA,OAAO;AACT;AAEA,IAAI,UAAU;IAAC;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;CAAG;AAE1C,SAAS,iBAAiB,IAAY,EAAE;IACtC,OAAO,OAAO;AAChB;AAEA,QAAQ,GAAG,CAAC,OAAO,SAAS;AAE5B,IAAI,UAAU;IAAC;IAAQ;IAAO;IAAO;IAAQ;CAAS;AAEtD,SAAS,WAAW,IAAY,EAAE;IAChC,OAAO,SAAS;AAClB;AAEA,QAAQ,GAAG,CAAC,OAAO,SAAS","sources":["src/index.ts"],"sourcesContent":["// type Filter = {\n//     (array: number[], predicate: (item: number) => boolean): number[];\n//     (array: string[], predicate: (item: string) => boolean): string[];\n//     (array: object[], predicate: (item: object) => boolean): object[];\n// };\n\n//Using generics instead of function overload\n\ntype Filter = {\n  //T can be any type. Any kind of word can be used instead of T\n  <T>(array: T[], predicate: (item: T) => boolean): T[];\n};\n\nconst filter: Filter = (array: T[], predicate) => {\n  //predicate is a function that returns either true or false\n\n  let result = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n\n    //if true item will be added to array\n    if (predicate(item)) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nlet numbers = [1, 3, 4, 5, 6, 3, 8, 9, 10];\n\nfunction greaterThanSeven(item: number) {\n  return item > 7;\n}\n\nconsole.log(filter(numbers, greaterThanSeven));\n\nlet animals = [\"cats\", \"dog\", \"pig\", \"fish\", \"rabbit\"];\n\nfunction filterCats(item: string) {\n  return item === \"cats\";\n}\n\nconsole.log(filter(animals, filterCats));\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"/__parcel_source_root/"}